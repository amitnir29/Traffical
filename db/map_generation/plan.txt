We want to generate a map.

First, a certain lane's data is represented using:
RoadLane:
    road_id: int
    lane_num: int

A map is represented using two lists:
1. RoadData:
    idnum: int
    coordinates: List[Tuple[Point, Point]]
    num_lanes: int
    max_speed: float
2. JunctionData:
    idnum: int
    coordinates: List[Point]
    goes_to: List[Tuple[RoadLane, RoadLane]]
    traffic_lights: List[List[RoadLane]]
    traffic_lights_coords: List[Point]
    num_traffic_lights: int
    * if the junction contains no traffic lights, then the last 3 fields are empty lists or zero

Our goal is to generate a map such that:
1. No roads cross each other
2. A junction is a connection between roads
3. For each road, the width matches number of lanes
4. No two roads or two junctions have the same idnum
5. In the goes_to of a junction, no road is both "From road" and "To road"
6. The length of the traffic_lights and traffic_lights_coords lists match the num_traffic_lights field of the junction
7. Road parts have a minimum length
8. Roads have a maximum total length
9. Roads have a minimum distance from each other, side-wise
10. Roads connect only through a junction
11. All RoadData have a valid road_id and a matching valid lane_num based on number of lanes in the road
12. Each junction connects at least 3 roads

The algortihm:
1. Start with a rectangle grid, each point represents a junction (which consists of 4 points - for each side).
2. Add all possible edges between the inside 4 points of each junction, to their neighbors in other junctions.
    This represents road sections, we are not deciding on number of lanes,
    just creating the general shape of the map for now.
3. For each inside point choose exactly one connection,
    so now all sides have either 1 connection, or 0 connections of diagonals cut their possible connections.
    That means that junctions may have more than one connection, but each side of a junction won't.
4. Each Junction that has 0/1 connections to it will be removed.
5. Apply DFS on the graph to determine the direction of each road.
    Before the run from the first randomly chosen junction, choose one in-road to it.
    This may lead to junctions with only in-roads or only out-roads, thats ok.
    (These are like work places where all drivers arrive at the morning and no one leaves until the evening).
6. Create a list of all chain roads connections.
    Roads that where created through a 2-connected junction with have more than one part,
    Remove all 2-connected junctions (based on roads and not low-level connections)
7. Set number of lanes for each road.
8. Set junction movement between each in-lane to the out-lanes.
    It is allowed that an out-lane will have no in-lane to it, but not for the whole out-road.
TODO left:
9. Set coordinates for each road and junction, Convert the data to db objects
10. For each junction, if it has exactly 1 in-road, do not set a traffic light to it.
    Else, there are 2/3 in-roads, set a traffic light for each of them.
    If there are only in-roads or only out-roads, do not set a traffic light.
